{"ast":null,"code":"var _jsxFileName = \"/home/nisarg/Desktop/ror/testone/client/src/components/NewInterview.js\";\nimport React, { useState } from 'react';\nimport { getParticipants, postNewInterview } from '../api';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { makeStyles, TextField, Button, Container, Snackbar } from '@material-ui/core';\nimport Home from './Home';\nimport { Router, Redirect } from '@reach/router';\nimport { render } from '@testing-library/react';\nimport Notifier, { openSnackbar } from './Notifier';\nconst useStyles = makeStyles(theme => ({\n  input: {\n    width: '100%',\n    '& > * + *': {\n      marginTop: theme.spacing(2)\n    }\n  },\n  timeField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 200\n  },\n  textField: {\n    width: '100%'\n  }\n}));\nexport default function NewInterview() {\n  const classes = useStyles();\n  const [name, setName] = useState();\n  const [description, setDescription] = useState();\n  const [candOpt, setCandOpt] = useState([]);\n  const [candidates, setCandidates] = useState();\n  const [interOpt, setInterOpt] = useState([]);\n  const [interviewers, setInterviewers] = useState();\n  const [date, setDate] = useState();\n  const [startTime, setStartTime] = useState();\n  const [endTime, setEndTime] = useState();\n\n  async function updateCandOpts(event, value, reason) {\n    if (value.length !== 1) return;\n    setCandOpt(await getParticipants({\n      query: value.toLowerCase(),\n      role: 1\n    }));\n  }\n\n  async function updateInterOpts(event, value, reason) {\n    if (value.length !== 1) return;\n    setInterOpt(await getParticipants({\n      query: value.toLowerCase(),\n      role: 0\n    }));\n  }\n\n  const nameField = /*#__PURE__*/React.createElement(TextField, {\n    id: \"name\",\n    label: \"Name\",\n    className: classes.textField,\n    onChange: event => setName(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 3\n    }\n  });\n  const descriptionField = /*#__PURE__*/React.createElement(TextField, {\n    id: \"description\",\n    label: \"Description\",\n    className: classes.textField,\n    multiline: true,\n    rows: 4,\n    onChange: event => setDescription(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 3\n    }\n  });\n  const participantField = /*#__PURE__*/React.createElement(Autocomplete, {\n    multiple: true,\n    filterSelectedOptions: true,\n    id: \"candidates\",\n    size: \"small\",\n    options: candOpt,\n    getOptionLabel: option => option.name,\n    getOptionSelected: (option, value) => option.id === value.id,\n    onInputChange: updateCandOpts,\n    onChange: (evt, value) => setCandidates(value),\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      variant: \"standard\",\n      label: \"Select Candidates\",\n      placeholder: \"candidates\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 5\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 3\n    }\n  });\n  const interviewerField = /*#__PURE__*/React.createElement(Autocomplete, {\n    multiple: true,\n    filterSelectedOptions: true,\n    id: \"interviewer\",\n    size: \"small\",\n    options: interOpt,\n    getOptionLabel: option => option.name,\n    getOptionSelected: (option, value) => option.id === value.id,\n    onInputChange: updateInterOpts,\n    onChange: (evt, value) => setInterviewers(value),\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      variant: \"standard\",\n      label: \"Select Interviewers\",\n      placeholder: \"Interviewers\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 5\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 3\n    }\n  });\n  const dateField = /*#__PURE__*/React.createElement(TextField, {\n    id: \"date\",\n    label: \"Date\",\n    type: \"date\",\n    className: classes.timeField,\n    InputLabelProps: {\n      shrink: true\n    },\n    onChange: event => setDate(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 3\n    }\n  });\n  const startTimeField = /*#__PURE__*/React.createElement(TextField, {\n    id: \"start-time\",\n    label: \"Start Time\",\n    type: \"time\",\n    className: classes.timeField,\n    InputLabelProps: {\n      shrink: true\n    },\n    onChange: event => setStartTime(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 3\n    }\n  });\n  const endTimeField = /*#__PURE__*/React.createElement(TextField, {\n    id: \"end-time\",\n    label: \"End Time\",\n    type: \"time\",\n    className: classes.timeField,\n    InputLabelProps: {\n      shrink: true\n    },\n    onChange: event => setEndTime(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 3\n    }\n  });\n\n  async function formSubmit(event) {\n    // use start_time.toISOString() to convert to the required format\n    const start_time = new Date(date + ' ' + startTime);\n    const end_time = new Date(date + ' ' + endTime); // rest of the params:\n    // date\n    // candidates\n    // interviewers\n    // name\n    // description\n    // do validation here\n\n    if (!(name && date && startTime && endTime && interviewers.length && candidates.length)) {\n      //make snackbar required field\n      console.log('All fields required except description. Make snack bar.');\n      openSnackbar({\n        message: 'Required fields are empty.'\n      });\n    }\n\n    if (end_time.getTime() <= start_time.getTime()) {\n      //end time should be later than start time\n      console.log('Start time can not be later than end time. Make Snack bar.');\n      openSnackbar({\n        message: 'Interview can not start after it ends.'\n      });\n    }\n\n    const inter = interviewers.map(one => {\n      return one.id;\n    });\n    const candid = candidates.map(one => {\n      return one.id;\n    }); // if (candidates.length && interviewers.length && start_time.getTime() < end_time.getTime()) {\n\n    const details = {\n      name,\n      description,\n      date,\n      start: startTime,\n      end: endTime,\n      interviewers: inter,\n      candidates: candid\n    };\n    let result;\n\n    try {\n      result = await postNewInterview(details);\n    } catch (error) {\n      console.log(error);\n    } // console.log(result);\n\n\n    if (result.status === 'SUCCESS') {\n      //redirect to home.\n      console.log('Now load home screen.');\n    } else {\n      console.log('Overlap occured, so make snackbar and load the same form.');\n    } // }\n\n\n    console.log(name);\n    console.log(description);\n    console.log(date);\n    console.log(startTime);\n    console.log(endTime);\n    console.log(inter);\n    console.log(candid);\n  }\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: classes.input,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 4\n    }\n  }, nameField, descriptionField, participantField, interviewerField, dateField, startTimeField, endTimeField, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: formSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 5\n    }\n  }, \"Submit\")));\n}","map":{"version":3,"sources":["/home/nisarg/Desktop/ror/testone/client/src/components/NewInterview.js"],"names":["React","useState","getParticipants","postNewInterview","Autocomplete","makeStyles","TextField","Button","Container","Snackbar","Home","Router","Redirect","render","Notifier","openSnackbar","useStyles","theme","input","width","marginTop","spacing","timeField","marginLeft","marginRight","textField","NewInterview","classes","name","setName","description","setDescription","candOpt","setCandOpt","candidates","setCandidates","interOpt","setInterOpt","interviewers","setInterviewers","date","setDate","startTime","setStartTime","endTime","setEndTime","updateCandOpts","event","value","reason","length","query","toLowerCase","role","updateInterOpts","nameField","target","descriptionField","participantField","option","id","evt","params","interviewerField","dateField","shrink","startTimeField","endTimeField","formSubmit","start_time","Date","end_time","console","log","message","getTime","inter","map","one","candid","details","start","end","result","error","status"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { getParticipants, postNewInterview } from '../api';\n\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { makeStyles, TextField, Button, Container, Snackbar } from '@material-ui/core';\nimport Home from './Home';\nimport { Router, Redirect } from '@reach/router';\nimport { render } from '@testing-library/react';\nimport Notifier, { openSnackbar } from './Notifier';\n\nconst useStyles = makeStyles((theme) => ({\n\tinput: {\n\t\twidth: '100%',\n\t\t'& > * + *': {\n\t\t\tmarginTop: theme.spacing(2)\n\t\t}\n\t},\n\ttimeField: {\n\t\tmarginLeft: theme.spacing(1),\n\t\tmarginRight: theme.spacing(1),\n\t\twidth: 200\n\t},\n\ttextField: {\n\t\twidth: '100%'\n\t}\n}));\n\nexport default function NewInterview() {\n\tconst classes = useStyles();\n\tconst [ name, setName ] = useState();\n\tconst [ description, setDescription ] = useState();\n\tconst [ candOpt, setCandOpt ] = useState([]);\n\tconst [ candidates, setCandidates ] = useState();\n\tconst [ interOpt, setInterOpt ] = useState([]);\n\tconst [ interviewers, setInterviewers ] = useState();\n\tconst [ date, setDate ] = useState();\n\tconst [ startTime, setStartTime ] = useState();\n\tconst [ endTime, setEndTime ] = useState();\n\n\tasync function updateCandOpts(event, value, reason) {\n\t\tif (value.length !== 1) return;\n\t\tsetCandOpt(await getParticipants({ query: value.toLowerCase(), role: 1 }));\n\t}\n\n\tasync function updateInterOpts(event, value, reason) {\n\t\tif (value.length !== 1) return;\n\t\tsetInterOpt(await getParticipants({ query: value.toLowerCase(), role: 0 }));\n\t}\n\n\tconst nameField = (\n\t\t<TextField\n\t\t\tid=\"name\"\n\t\t\tlabel=\"Name\"\n\t\t\tclassName={classes.textField}\n\t\t\tonChange={(event) => setName(event.target.value)}\n\t\t/>\n\t);\n\n\tconst descriptionField = (\n\t\t<TextField\n\t\t\tid=\"description\"\n\t\t\tlabel=\"Description\"\n\t\t\tclassName={classes.textField}\n\t\t\tmultiline\n\t\t\trows={4}\n\t\t\tonChange={(event) => setDescription(event.target.value)}\n\t\t/>\n\t);\n\n\tconst participantField = (\n\t\t<Autocomplete\n\t\t\tmultiple\n\t\t\tfilterSelectedOptions\n\t\t\tid=\"candidates\"\n\t\t\tsize=\"small\"\n\t\t\toptions={candOpt}\n\t\t\tgetOptionLabel={(option) => option.name}\n\t\t\tgetOptionSelected={(option, value) => option.id === value.id}\n\t\t\tonInputChange={updateCandOpts}\n\t\t\tonChange={(evt, value) => setCandidates(value)}\n\t\t\trenderInput={(params) => (\n\t\t\t\t<TextField {...params} variant=\"standard\" label=\"Select Candidates\" placeholder=\"candidates\" />\n\t\t\t)}\n\t\t/>\n\t);\n\n\tconst interviewerField = (\n\t\t<Autocomplete\n\t\t\tmultiple\n\t\t\tfilterSelectedOptions\n\t\t\tid=\"interviewer\"\n\t\t\tsize=\"small\"\n\t\t\toptions={interOpt}\n\t\t\tgetOptionLabel={(option) => option.name}\n\t\t\tgetOptionSelected={(option, value) => option.id === value.id}\n\t\t\tonInputChange={updateInterOpts}\n\t\t\tonChange={(evt, value) => setInterviewers(value)}\n\t\t\trenderInput={(params) => (\n\t\t\t\t<TextField {...params} variant=\"standard\" label=\"Select Interviewers\" placeholder=\"Interviewers\" />\n\t\t\t)}\n\t\t/>\n\t);\n\n\tconst dateField = (\n\t\t<TextField\n\t\t\tid=\"date\"\n\t\t\tlabel=\"Date\"\n\t\t\ttype=\"date\"\n\t\t\tclassName={classes.timeField}\n\t\t\tInputLabelProps={{\n\t\t\t\tshrink: true\n\t\t\t}}\n\t\t\tonChange={(event) => setDate(event.target.value)}\n\t\t/>\n\t);\n\n\tconst startTimeField = (\n\t\t<TextField\n\t\t\tid=\"start-time\"\n\t\t\tlabel=\"Start Time\"\n\t\t\ttype=\"time\"\n\t\t\tclassName={classes.timeField}\n\t\t\tInputLabelProps={{\n\t\t\t\tshrink: true\n\t\t\t}}\n\t\t\tonChange={(event) => setStartTime(event.target.value)}\n\t\t/>\n\t);\n\n\tconst endTimeField = (\n\t\t<TextField\n\t\t\tid=\"end-time\"\n\t\t\tlabel=\"End Time\"\n\t\t\ttype=\"time\"\n\t\t\tclassName={classes.timeField}\n\t\t\tInputLabelProps={{\n\t\t\t\tshrink: true\n\t\t\t}}\n\t\t\tonChange={(event) => setEndTime(event.target.value)}\n\t\t/>\n\t);\n\n\tasync function formSubmit(event) {\n\t\t// use start_time.toISOString() to convert to the required format\n\n\t\tconst start_time = new Date(date + ' ' + startTime);\n\t\tconst end_time = new Date(date + ' ' + endTime);\n\t\t// rest of the params:\n\t\t// date\n\t\t// candidates\n\t\t// interviewers\n\t\t// name\n\t\t// description\n\t\t// do validation here\n\n\t\tif (!(name && date && startTime && endTime && interviewers.length && candidates.length)) {\n\t\t\t//make snackbar required field\n\t\t\tconsole.log('All fields required except description. Make snack bar.');\n\t\t\topenSnackbar({ message: 'Required fields are empty.' });\n\t\t}\n\n\t\tif (end_time.getTime() <= start_time.getTime()) {\n\t\t\t//end time should be later than start time\n\t\t\tconsole.log('Start time can not be later than end time. Make Snack bar.');\n\t\t\topenSnackbar({ message: 'Interview can not start after it ends.' });\n\t\t}\n\n\t\tconst inter = interviewers.map((one) => {\n\t\t\treturn one.id;\n\t\t});\n\n\t\tconst candid = candidates.map((one) => {\n\t\t\treturn one.id;\n\t\t});\n\n\t\t// if (candidates.length && interviewers.length && start_time.getTime() < end_time.getTime()) {\n\t\tconst details = {\n\t\t\tname,\n\t\t\tdescription,\n\t\t\tdate,\n\t\t\tstart: startTime,\n\t\t\tend: endTime,\n\t\t\tinterviewers: inter,\n\t\t\tcandidates: candid\n\t\t};\n\t\tlet result;\n\n\t\ttry {\n\t\t\tresult = await postNewInterview(details);\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t\t// console.log(result);\n\t\tif (result.status === 'SUCCESS') {\n\t\t\t//redirect to home.\n\t\t\tconsole.log('Now load home screen.');\n\t\t} else {\n\t\t\tconsole.log('Overlap occured, so make snackbar and load the same form.');\n\t\t}\n\t\t// }\n\t\tconsole.log(name);\n\t\tconsole.log(description);\n\t\tconsole.log(date);\n\t\tconsole.log(startTime);\n\t\tconsole.log(endTime);\n\t\tconsole.log(inter);\n\t\tconsole.log(candid);\n\t}\n\treturn (\n\t\t<Container>\n\t\t\t<form className={classes.input}>\n\t\t\t\t{nameField}\n\t\t\t\t{descriptionField}\n\t\t\t\t{participantField}\n\t\t\t\t{interviewerField}\n\t\t\t\t{dateField}\n\t\t\t\t{startTimeField}\n\t\t\t\t{endTimeField}\n\t\t\t\t<br />\n\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={formSubmit}>\n\t\t\t\t\tSubmit\n\t\t\t\t</Button>\n\t\t\t</form>\n\t\t</Container>\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}