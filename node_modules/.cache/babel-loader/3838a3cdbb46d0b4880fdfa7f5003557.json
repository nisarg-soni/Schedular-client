{"ast":null,"code":"var _jsxFileName = \"/home/nisarg/Desktop/ror/testone/client/src/components/NewInterview.js\";\nimport React, { useState } from 'react';\nimport { getParticipants, postNewInterview } from '../api';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { makeStyles, TextField, Button, Container } from '@material-ui/core';\nimport Notifier, { openSnackbar } from './Notifier';\nimport { MuiThemeProvider } from 'material-ui/styles';\nconst useStyles = makeStyles(theme => ({\n  input: {\n    width: '100%',\n    '& > * + *': {\n      marginTop: theme.spacing(2)\n    }\n  },\n  timeField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 200\n  },\n  textField: {\n    width: '100%'\n  }\n}));\nexport default function NewInterview() {\n  const classes = useStyles();\n  const [name, setName] = useState();\n  const [description, setDescription] = useState();\n  const [candOpt, setCandOpt] = useState([]);\n  const [candidates, setCandidates] = useState([]);\n  const [interOpt, setInterOpt] = useState([]);\n  const [interviewers, setInterviewers] = useState([]);\n  const [date, setDate] = useState();\n  const [startTime, setStartTime] = useState();\n  const [endTime, setEndTime] = useState(); // update candidates\n\n  async function updateCandOpts(event, value, reason) {\n    if (value.length !== 1) return;\n    setCandOpt(await getParticipants({\n      query: value.toLowerCase(),\n      role: 1\n    }));\n  } // update interviewers\n\n\n  async function updateInterOpts(event, value, reason) {\n    if (value.length !== 1) return;\n    setInterOpt(await getParticipants({\n      query: value.toLowerCase(),\n      role: 0\n    }));\n  } // Name of the interview.\n\n\n  const nameField = /*#__PURE__*/React.createElement(TextField, {\n    required: true,\n    id: \"name\",\n    label: \"Name\",\n    className: classes.textField,\n    onChange: event => setName(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 3\n    }\n  }); // Description\n\n  const descriptionField = /*#__PURE__*/React.createElement(TextField, {\n    id: \"description\",\n    label: \"Description\",\n    className: classes.textField,\n    multiline: true,\n    rows: 4,\n    onChange: event => setDescription(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 3\n    }\n  }); // Candidates\n\n  const candidateField = /*#__PURE__*/React.createElement(Autocomplete, {\n    multiple: true,\n    filterSelectedOptions: true,\n    id: \"candidates\",\n    size: \"small\",\n    options: candOpt,\n    getOptionLabel: option => option.name,\n    getOptionSelected: (option, value) => option.id === value.id,\n    onInputChange: updateCandOpts,\n    onChange: (evt, value) => setCandidates(value),\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      variant: \"standard\",\n      label: \"Select Candidates\",\n      placeholder: \"candidates\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 5\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 3\n    }\n  }); // Interviewers\n\n  const interviewerField = /*#__PURE__*/React.createElement(Autocomplete, {\n    multiple: true,\n    filterSelectedOptions: true,\n    id: \"interviewer\",\n    size: \"small\",\n    options: interOpt,\n    getOptionLabel: option => option.name,\n    getOptionSelected: (option, value) => option.id === value.id,\n    onInputChange: updateInterOpts,\n    onChange: (evt, value) => setInterviewers(value),\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      variant: \"standard\",\n      label: \"Select Interviewers\",\n      placeholder: \"Interviewers\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 5\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 3\n    }\n  }); // Date\n\n  const dateField = /*#__PURE__*/React.createElement(TextField, {\n    required: true,\n    id: \"date\",\n    label: \"Date\",\n    type: \"date\",\n    className: classes.timeField,\n    InputLabelProps: {\n      shrink: true\n    },\n    onChange: event => setDate(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 3\n    }\n  }); // Start time\n\n  const startTimeField = /*#__PURE__*/React.createElement(TextField, {\n    required: true,\n    id: \"start-time\",\n    label: \"Start Time\",\n    type: \"time\",\n    className: classes.timeField,\n    InputLabelProps: {\n      shrink: true\n    },\n    onChange: event => setStartTime(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 3\n    }\n  }); // End time\n\n  const endTimeField = /*#__PURE__*/React.createElement(TextField, {\n    required: true,\n    id: \"end-time\",\n    label: \"End Time\",\n    type: \"time\",\n    className: classes.timeField,\n    InputLabelProps: {\n      shrink: true\n    },\n    onChange: event => setEndTime(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 3\n    }\n  }); // Triggered on submit\n\n  async function formSubmit(event) {\n    event.preventDefault(); // use start_time.toISOString() to convert to the required format\n\n    const start_time = new Date(date + ' ' + startTime);\n    const end_time = new Date(date + ' ' + endTime); //\n\n    const start_str = `${start_time.getUTCHours() < 10 ? '0' + start_time.getUTCHours() : String(start_time.getUTCHours())}:${start_time.getUTCMinutes() < 10 ? '0' + start_time.getUTCMinutes() : String(start_time.getUTCMinutes())}`;\n    const end_str = `${end_time.getUTCHours() < 10 ? '0' + end_time.getUTCHours() : String(end_time.getUTCHours())}:${end_time.getUTCMinutes() < 10 ? '0' + end_time.getUTCMinutes() : String(end_time.getUTCMinutes())}`;\n\n    if (!interviewers.length) {\n      openSnackbar({\n        message: 'Interviewer is empty'\n      });\n    } else if (!candidates.length) {\n      openSnackbar({\n        message: 'Candidates is empty'\n      });\n    } else if (end_time.getTime() <= start_time.getTime()) {\n      openSnackbar({\n        message: 'Interview can not start after it ends.'\n      });\n    } else {\n      const inter = interviewers.map(one => {\n        return one.id;\n      });\n      const candid = candidates.map(one => {\n        return one.id;\n      });\n      const details = {\n        name,\n        description,\n        date,\n        start: start_str,\n        end: end_str,\n        interviewers: inter,\n        candidates: candid\n      };\n      let result;\n\n      try {\n        result = await postNewInterview(details);\n      } catch (error) {\n        console.log(error);\n      }\n\n      if (result.status === 'SUCCESS') {\n        openSnackbar({\n          message: 'Successful'\n        }); //redirect to home.\n\n        console.log('Now load home screen.');\n        setTimeout(() => {\n          window.location = '/';\n        }, 1000);\n      } else {\n        // Overlap has occured with existing interview.\n        openSnackbar({\n          message: 'Interview is overlapping with a previous interview.'\n        });\n      }\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(MuiThemeProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(Notifier, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"form\", {\n    className: classes.input,\n    onSubmit: formSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 5\n    }\n  }, nameField, descriptionField, candidateField, interviewerField, dateField, startTimeField, endTimeField, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 6\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 6\n    }\n  }, \"Submit\"))));\n}","map":{"version":3,"sources":["/home/nisarg/Desktop/ror/testone/client/src/components/NewInterview.js"],"names":["React","useState","getParticipants","postNewInterview","Autocomplete","makeStyles","TextField","Button","Container","Notifier","openSnackbar","MuiThemeProvider","useStyles","theme","input","width","marginTop","spacing","timeField","marginLeft","marginRight","textField","NewInterview","classes","name","setName","description","setDescription","candOpt","setCandOpt","candidates","setCandidates","interOpt","setInterOpt","interviewers","setInterviewers","date","setDate","startTime","setStartTime","endTime","setEndTime","updateCandOpts","event","value","reason","length","query","toLowerCase","role","updateInterOpts","nameField","target","descriptionField","candidateField","option","id","evt","params","interviewerField","dateField","shrink","startTimeField","endTimeField","formSubmit","preventDefault","start_time","Date","end_time","start_str","getUTCHours","String","getUTCMinutes","end_str","message","getTime","inter","map","one","candid","details","start","end","result","error","console","log","status","setTimeout","window","location"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { getParticipants, postNewInterview } from '../api';\n\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { makeStyles, TextField, Button, Container } from '@material-ui/core';\nimport Notifier, { openSnackbar } from './Notifier';\nimport { MuiThemeProvider } from 'material-ui/styles';\n\nconst useStyles = makeStyles((theme) => ({\n\tinput: {\n\t\twidth: '100%',\n\t\t'& > * + *': {\n\t\t\tmarginTop: theme.spacing(2)\n\t\t}\n\t},\n\ttimeField: {\n\t\tmarginLeft: theme.spacing(1),\n\t\tmarginRight: theme.spacing(1),\n\t\twidth: 200\n\t},\n\ttextField: {\n\t\twidth: '100%'\n\t}\n}));\n\nexport default function NewInterview() {\n\tconst classes = useStyles();\n\tconst [ name, setName ] = useState();\n\tconst [ description, setDescription ] = useState();\n\tconst [ candOpt, setCandOpt ] = useState([]);\n\tconst [ candidates, setCandidates ] = useState([]);\n\tconst [ interOpt, setInterOpt ] = useState([]);\n\tconst [ interviewers, setInterviewers ] = useState([]);\n\tconst [ date, setDate ] = useState();\n\tconst [ startTime, setStartTime ] = useState();\n\tconst [ endTime, setEndTime ] = useState();\n\n\t// update candidates\n\tasync function updateCandOpts(event, value, reason) {\n\t\tif (value.length !== 1) return;\n\t\tsetCandOpt(await getParticipants({ query: value.toLowerCase(), role: 1 }));\n\t}\n\n\t// update interviewers\n\tasync function updateInterOpts(event, value, reason) {\n\t\tif (value.length !== 1) return;\n\t\tsetInterOpt(await getParticipants({ query: value.toLowerCase(), role: 0 }));\n\t}\n\n\t// Name of the interview.\n\tconst nameField = (\n\t\t<TextField\n\t\t\trequired\n\t\t\tid=\"name\"\n\t\t\tlabel=\"Name\"\n\t\t\tclassName={classes.textField}\n\t\t\tonChange={(event) => setName(event.target.value)}\n\t\t/>\n\t);\n\n\t// Description\n\tconst descriptionField = (\n\t\t<TextField\n\t\t\tid=\"description\"\n\t\t\tlabel=\"Description\"\n\t\t\tclassName={classes.textField}\n\t\t\tmultiline\n\t\t\trows={4}\n\t\t\tonChange={(event) => setDescription(event.target.value)}\n\t\t/>\n\t);\n\n\t// Candidates\n\tconst candidateField = (\n\t\t<Autocomplete\n\t\t\tmultiple\n\t\t\tfilterSelectedOptions\n\t\t\tid=\"candidates\"\n\t\t\tsize=\"small\"\n\t\t\toptions={candOpt}\n\t\t\tgetOptionLabel={(option) => option.name}\n\t\t\tgetOptionSelected={(option, value) => option.id === value.id}\n\t\t\tonInputChange={updateCandOpts}\n\t\t\tonChange={(evt, value) => setCandidates(value)}\n\t\t\trenderInput={(params) => (\n\t\t\t\t<TextField {...params} variant=\"standard\" label=\"Select Candidates\" placeholder=\"candidates\" />\n\t\t\t)}\n\t\t/>\n\t);\n\n\t// Interviewers\n\tconst interviewerField = (\n\t\t<Autocomplete\n\t\t\tmultiple\n\t\t\tfilterSelectedOptions\n\t\t\tid=\"interviewer\"\n\t\t\tsize=\"small\"\n\t\t\toptions={interOpt}\n\t\t\tgetOptionLabel={(option) => option.name}\n\t\t\tgetOptionSelected={(option, value) => option.id === value.id}\n\t\t\tonInputChange={updateInterOpts}\n\t\t\tonChange={(evt, value) => setInterviewers(value)}\n\t\t\trenderInput={(params) => (\n\t\t\t\t<TextField {...params} variant=\"standard\" label=\"Select Interviewers\" placeholder=\"Interviewers\" />\n\t\t\t)}\n\t\t/>\n\t);\n\n\t// Date\n\tconst dateField = (\n\t\t<TextField\n\t\t\trequired\n\t\t\tid=\"date\"\n\t\t\tlabel=\"Date\"\n\t\t\ttype=\"date\"\n\t\t\tclassName={classes.timeField}\n\t\t\tInputLabelProps={{\n\t\t\t\tshrink: true\n\t\t\t}}\n\t\t\tonChange={(event) => setDate(event.target.value)}\n\t\t/>\n\t);\n\n\t// Start time\n\tconst startTimeField = (\n\t\t<TextField\n\t\t\trequired\n\t\t\tid=\"start-time\"\n\t\t\tlabel=\"Start Time\"\n\t\t\ttype=\"time\"\n\t\t\tclassName={classes.timeField}\n\t\t\tInputLabelProps={{\n\t\t\t\tshrink: true\n\t\t\t}}\n\t\t\tonChange={(event) => setStartTime(event.target.value)}\n\t\t/>\n\t);\n\n\t// End time\n\tconst endTimeField = (\n\t\t<TextField\n\t\t\trequired\n\t\t\tid=\"end-time\"\n\t\t\tlabel=\"End Time\"\n\t\t\ttype=\"time\"\n\t\t\tclassName={classes.timeField}\n\t\t\tInputLabelProps={{\n\t\t\t\tshrink: true\n\t\t\t}}\n\t\t\tonChange={(event) => setEndTime(event.target.value)}\n\t\t/>\n\t);\n\n\t// Triggered on submit\n\tasync function formSubmit(event) {\n\t\tevent.preventDefault();\n\t\t// use start_time.toISOString() to convert to the required format\n\t\tconst start_time = new Date(date + ' ' + startTime);\n\t\tconst end_time = new Date(date + ' ' + endTime);\n\n\t\t//\n\t\tconst start_str = `${start_time.getUTCHours() < 10\n\t\t\t? '0' + start_time.getUTCHours()\n\t\t\t: String(start_time.getUTCHours())}:${start_time.getUTCMinutes() < 10\n\t\t\t? '0' + start_time.getUTCMinutes()\n\t\t\t: String(start_time.getUTCMinutes())}`;\n\t\tconst end_str = `${end_time.getUTCHours() < 10\n\t\t\t? '0' + end_time.getUTCHours()\n\t\t\t: String(end_time.getUTCHours())}:${end_time.getUTCMinutes() < 10\n\t\t\t? '0' + end_time.getUTCMinutes()\n\t\t\t: String(end_time.getUTCMinutes())}`;\n\t\tif (!interviewers.length) {\n\t\t\topenSnackbar({ message: 'Interviewer is empty' });\n\t\t} else if (!candidates.length) {\n\t\t\topenSnackbar({ message: 'Candidates is empty' });\n\t\t} else if (end_time.getTime() <= start_time.getTime()) {\n\t\t\topenSnackbar({ message: 'Interview can not start after it ends.' });\n\t\t} else {\n\t\t\tconst inter = interviewers.map((one) => {\n\t\t\t\treturn one.id;\n\t\t\t});\n\n\t\t\tconst candid = candidates.map((one) => {\n\t\t\t\treturn one.id;\n\t\t\t});\n\n\t\t\tconst details = {\n\t\t\t\tname,\n\t\t\t\tdescription,\n\t\t\t\tdate,\n\t\t\t\tstart: start_str,\n\t\t\t\tend: end_str,\n\t\t\t\tinterviewers: inter,\n\t\t\t\tcandidates: candid\n\t\t\t};\n\t\t\tlet result;\n\n\t\t\ttry {\n\t\t\t\tresult = await postNewInterview(details);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.log(error);\n\t\t\t}\n\n\t\t\tif (result.status === 'SUCCESS') {\n\t\t\t\topenSnackbar({ message: 'Successful' });\n\t\t\t\t//redirect to home.\n\t\t\t\tconsole.log('Now load home screen.');\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\twindow.location = '/';\n\t\t\t\t}, 1000);\n\t\t\t} else {\n\t\t\t\t// Overlap has occured with existing interview.\n\t\t\t\topenSnackbar({ message: 'Interview is overlapping with a previous interview.' });\n\t\t\t}\n\t\t}\n\t}\n\treturn (\n\t\t<Container>\n\t\t\t<MuiThemeProvider>\n\t\t\t\t<Notifier />\n\t\t\t\t<form className={classes.input} onSubmit={formSubmit}>\n\t\t\t\t\t{nameField}\n\t\t\t\t\t{descriptionField}\n\t\t\t\t\t{candidateField}\n\t\t\t\t\t{interviewerField}\n\t\t\t\t\t{dateField}\n\t\t\t\t\t{startTimeField}\n\t\t\t\t\t{endTimeField}\n\t\t\t\t\t<br />\n\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" type=\"submit\">\n\t\t\t\t\t\tSubmit\n\t\t\t\t\t</Button>\n\t\t\t\t</form>\n\t\t\t</MuiThemeProvider>\n\t\t</Container>\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}